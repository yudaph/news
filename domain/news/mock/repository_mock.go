// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package news_mock is a generated GoMock package.
package news_mock

import (
	context "context"
	entities "news/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateNews mocks base method.
func (m *MockRepository) CreateNews(ctx context.Context, news *entities.News) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNews", ctx, news)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNews indicates an expected call of CreateNews.
func (mr *MockRepositoryMockRecorder) CreateNews(ctx, news interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNews", reflect.TypeOf((*MockRepository)(nil).CreateNews), ctx, news)
}

// DeleteNews mocks base method.
func (m *MockRepository) DeleteNews(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNews", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNews indicates an expected call of DeleteNews.
func (mr *MockRepositoryMockRecorder) DeleteNews(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNews", reflect.TypeOf((*MockRepository)(nil).DeleteNews), ctx, id)
}

// GetAllNews mocks base method.
func (m *MockRepository) GetAllNews(ctx context.Context) (*entities.SliceNews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNews", ctx)
	ret0, _ := ret[0].(*entities.SliceNews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNews indicates an expected call of GetAllNews.
func (mr *MockRepositoryMockRecorder) GetAllNews(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNews", reflect.TypeOf((*MockRepository)(nil).GetAllNews), ctx)
}

// GetNewsBySlug mocks base method.
func (m *MockRepository) GetNewsBySlug(ctx context.Context, slug string) (*entities.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsBySlug", ctx, slug)
	ret0, _ := ret[0].(*entities.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsBySlug indicates an expected call of GetNewsBySlug.
func (mr *MockRepositoryMockRecorder) GetNewsBySlug(ctx, slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsBySlug", reflect.TypeOf((*MockRepository)(nil).GetNewsBySlug), ctx, slug)
}

// GetNewsByStatus mocks base method.
func (m *MockRepository) GetNewsByStatus(ctx context.Context, status entities.NewsStatus) (*entities.SliceNews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsByStatus", ctx, status)
	ret0, _ := ret[0].(*entities.SliceNews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsByStatus indicates an expected call of GetNewsByStatus.
func (mr *MockRepositoryMockRecorder) GetNewsByStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsByStatus", reflect.TypeOf((*MockRepository)(nil).GetNewsByStatus), ctx, status)
}

// GetNewsByTopic mocks base method.
func (m *MockRepository) GetNewsByTopic(ctx context.Context, topic string) (*entities.SliceNews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsByTopic", ctx, topic)
	ret0, _ := ret[0].(*entities.SliceNews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsByTopic indicates an expected call of GetNewsByTopic.
func (mr *MockRepositoryMockRecorder) GetNewsByTopic(ctx, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsByTopic", reflect.TypeOf((*MockRepository)(nil).GetNewsByTopic), ctx, topic)
}

// UpdateNews mocks base method.
func (m *MockRepository) UpdateNews(ctx context.Context, news *entities.News) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNews", ctx, news)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNews indicates an expected call of UpdateNews.
func (mr *MockRepositoryMockRecorder) UpdateNews(ctx, news interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNews", reflect.TypeOf((*MockRepository)(nil).UpdateNews), ctx, news)
}
