// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package news_mock is a generated GoMock package.
package news_mock

import (
	context "context"
	entities "news/domain/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetNews mocks base method.
func (m *MockCache) GetNews(ctx context.Context, key string) (*entities.NewsDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNews", ctx, key)
	ret0, _ := ret[0].(*entities.NewsDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNews indicates an expected call of GetNews.
func (mr *MockCacheMockRecorder) GetNews(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNews", reflect.TypeOf((*MockCache)(nil).GetNews), ctx, key)
}

// GetSliceNews mocks base method.
func (m *MockCache) GetSliceNews(ctx context.Context, key string) (*entities.SliceNewsDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSliceNews", ctx, key)
	ret0, _ := ret[0].(*entities.SliceNewsDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSliceNews indicates an expected call of GetSliceNews.
func (mr *MockCacheMockRecorder) GetSliceNews(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSliceNews", reflect.TypeOf((*MockCache)(nil).GetSliceNews), ctx, key)
}

// SetNews mocks base method.
func (m *MockCache) SetNews(ctx context.Context, key string, newsDto *entities.NewsDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNews", ctx, key, newsDto)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNews indicates an expected call of SetNews.
func (mr *MockCacheMockRecorder) SetNews(ctx, key, newsDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNews", reflect.TypeOf((*MockCache)(nil).SetNews), ctx, key, newsDto)
}

// SetSliceNews mocks base method.
func (m *MockCache) SetSliceNews(ctx context.Context, key string, sliceNewsDto *entities.SliceNewsDto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSliceNews", ctx, key, sliceNewsDto)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSliceNews indicates an expected call of SetSliceNews.
func (mr *MockCacheMockRecorder) SetSliceNews(ctx, key, sliceNewsDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSliceNews", reflect.TypeOf((*MockCache)(nil).SetSliceNews), ctx, key, sliceNewsDto)
}
